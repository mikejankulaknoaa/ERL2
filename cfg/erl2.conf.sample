[system]

# logging to file on/off
# disableFileLogging = False

# configure the system's clock display
# clockWithSeconds = False
# clockTwoLines = False

# logging: frequency (seconds)
# controls how often data from the sensors and controls are saved in memory and written to log files
# loggingFrequency = 300

# data retention in memory (seconds)
# how long the data from the sensors and controls are held in memory; 86400s is one day
# memoryRetention = 86400


[device]

# Device Type (tank or controller)
# type = tank

# Device Identifier
# id = Tank 0


[network]

# controllers by default are expected to be found at the .1 address of the ERL2
# subnet (which is the default behavior if this setting is None); you can override
# this behavior by specifying a full IP address here (without quotation marks)
# controllerIP = None

# networking is disabled by default
# enabled = False

# any device: set ipNetworkStub to the stub address of the private ERL2 Tank
# subnet (or use None to have ERL2 logic find the right addresses)
# ipNetworkStub = 192.168.2.

# controllers: set ipRange to restrict subnet searches to a subset of addresses
# (or use None to search all possible addresses in the private ERL2 subnet)
# ipRange = [2, 63]

# hardcoding: manually specify a list of child IP addresses (default None)
# example: hardcoding = ['10.141.140.223', '10.141.140.227']
# hardcoding = None

# any device: how often to refresh GUI stats about network activity (seconds)
# updateFrequency = 5

# any device: how long to wait before reporting network comms have lapsed (seconds)
# lapseTime = 60


[virtualtemp]

# this is a virtual sensor for testing, designed to 'react' to heater and chiller
# enabled = False


[temperature]

# if using a serial temperature sensor (e.g. AtlasScientific), specify
# serialPort and baudRate parameters. if using a 4-20mA or 0-10V sensor,
# specify channelType, stackLevel, inputChannel, hardwareRange. System
# defaults to serial type unless serialPort is set to None
# serialPort = /dev/ttyAMA3

# baud rate for communicating with a serial temperature sensor
# baudRate = 9600

# sequent microsystems stack level (usually 0, can be up to 7)
# stackLevel = 0

# sequent microsystems input channel number (can be 1 - 4), reads 4-20 mA
# inputChannel = 1
# channelType = milliAmps

# how to convert volts or milliAmps to the sensor value -- what to call it,
# what 0 V (or 4 mA) should map to, and what 10 V (or 20 mA) should map to
# parameterName = temp.degC
# hardwareRange = [0.0, 100.0]

# which parameter to display in GUI, and with how many decimal places
# displayParameter = temp.degC
# displayDecimals = 1

# sampling: frequency (seconds)
# how often the sensor is sampled; not all values may be saved in memory/files
# sampleFrequency = 5

# logging: frequency (seconds)
# controls how often measured values are saved in memory and written to log files
# loggingFrequency = 300

# default corrective offset (degrees Celsius), and the parameter it applies to
# (i.e. an offset applied when external/redundant temperature readings
#  suggest that the temperature sensor is off by a consistent factor);
# In most cases the offsetParameter and the displayParameter will be the same
# offsetParameter = temp.degC
# offsetDefault = 0.0

# valid range: values outside of this range will be considered errors
# validRange = [10.0, 40.0]

# default temperature hysteresis (degrees Celsius)
# hysteresisDefault = 0.1

# default temperature setpoint (degrees Celsius)
# setpointDefault = 25.0

# default dynamic program (24 values, degrees Celsius)
# this is a sine shape running between 25 degC (6am low point) and 29 degC (6pm high point)
# dynamicDefault = [27.0, 26.5, 26.0, 25.6, 25.3, 25.1, 25.0, 25.1, 25.3, 25.6, 26.0, 26.5, 27.0, 27.5, 28.0, 28.4, 28.7, 28.9, 29.0, 28.9, 28.7, 28.4, 28.0, 27.5]


[pH]

# path to the Raspberry Pi serial port to be used for pH communications
# (use None if no serial port is available for this function)
# serialPort = /dev/ttyAMA1

# baud rate for communicating with the pH sensor
# baudRate = 19200

# which parameter to display in GUI, and with how many decimal places
# displayParameter = pH
# displayDecimals = 2

# sampling: frequency (seconds)
# how often the sensor is sampled; not all values may be saved in memory/files
# sampleFrequency = 60

# logging: frequency (seconds)
# controls how often measured values are saved in memory and written to log files
# loggingFrequency = 300

# default corrective offset (total pH), and the parameter it applies to
# (i.e. an offset applied when external/redundant pH readings
# suggest that the pH sensor is off by a consistent factor);
# In most cases the offsetParameter and the displayParameter will be the same
# offsetParameter = pH
# offsetDefault = 0.0

# valid range: values outside of this range will be considered errors
# validRange = [6.00, 9.00]

# default pH setpoint (total pH)
# setpointDefault = 7.80

# default temperature hysteresis (total pH)
# hysteresisDefault = 0.01

# default dynamic program (24 values, total pH)
# this is a sine shape running between 7.95 (6am low point) and 8.05 (6pm high point)
# dynamicDefault = [8.00, 7.99, 7.98, 7.96, 7.96, 7.95, 7.95, 7.95, 7.96, 7.96, 7.98, 7.99, 8.00, 8.01, 8.03, 8.04, 8.04, 8.05, 8.05, 8.05, 8.04, 8.04, 8.03, 8.01]

# PID Tuning Parameters for pH -- controls are the Air and CO2 MFCs
# mfc.air.Kp = 10000.0
# mfc.air.Ki = 1000.0
# mfc.air.Kd = 0.0
# mfc.co2.Kp = -40.0
# mfc.co2.Ki = -4.0
# mfc.co2.Kd = 0.0


[DO]

# path to the Raspberry Pi serial port to be used for O2 communications
# (use None if no serial port is available for this function)
# serialPort = /dev/ttyAMA2

# baud rate for communicating with the pH sensor
# baudRate = 19200

# which parameter to display in GUI, and with how many decimal places
# displayParameter = uM
# displayDecimals = 0

# sampling: frequency (seconds)
# how often the sensor is sampled; not all values may be saved in memory/files
# sampleFrequency = 60

# logging: frequency (seconds)
# controls how often measured values are saved in memory and written to log files
# loggingFrequency = 300

# default corrective offset (umol/L), and the parameter it applies to
# (i.e. an offset applied when external/redundant DO readings
# suggest that the O2 sensor is off by a consistent factor);
# In most cases the offsetParameter and the displayParameter will be the same
# offsetParameter = uM
# offsetDefault = 0.

# valid range: values outside of this range will be considered errors
# validRange = [100., 700.]

# default pH setpoint (total pH)
# setpointDefault = 300.

# default dynamic program (24 values, umol/L)
# this is a sine shape running between 275. (6am low point) and 325. (6pm high point)
# dynamicDefault = [300., 294., 288., 282., 278., 276., 275., 276., 278., 282., 288., 294., 300., 306., 313., 318., 322., 324., 325., 324., 322., 318., 313., 306.]

# PID Tuning Parameters for DO -- right now, ignore that Air is part of both pH and DO subsystems
# mfc.air.Kp = 10000.0
# mfc.air.Ki = 1000.0
# mfc.air.Kd = 0.0
# mfc.n2.Kp = -10000.0
# mfc.n2.Ki = -1000.0
# mfc.n2.Kd = 0.0


[heater]

# Raspberry Pi GPIO channel number (can be 1 - 27), writes 0 or 1, GPIO.LOW or GPIO.HIGH, True or False;
# ERL2 uses GPIO 23 (pin 16), by default, to avoid conflicts with other Raspberry Pi wiring
# gpioChannel = 23

# logging: frequency (seconds)
# controls how often metrics from the heater are saved in memory and written to log files
# loggingFrequency = 300


[chiller]

# sequent microsystems stack level (usually 0, can be up to 7)
# stackLevel = 0

# sequent microsystems Open-Drain / PWM output channel number (can be 1 - 4), writes 0-100%
# outputPwmChannel = 1

# logging: frequency (seconds)
# controls how often metrics from the chiller are saved in memory and written to log files
# loggingFrequency = 300


[mfc.air]

# sequent microsystems stack level (usually 0, can be up to 7)
# stackLevel = 0

# sequent microsystems input channel number (can be 1 - 4), reads 4-20 mA
# inputChannel = 2
# channelType = volts

# how to convert volts or milliAmps to the sensor value -- what to call it,
# what 0 V (or 4 mA) should map to, and what 10 V (or 20 mA) should map to
# parameterName = flow.mLperMin
# hardwareRange = [0., 10000.]

# which parameter to display in GUI, and with how many decimal places
# displayParameter = flow.mLperMin
# displayDecimals = 0

# sampling: frequency (seconds)
# how often the MFC is asked for its current setting;
# not all values may be saved in memory/files
# sampleFrequency = 5

# logging: frequency (seconds)
# controls how often metrics from the MFC are saved in memory and written to log files
# loggingFrequency = 300

# default corrective offset (mL/min), and the parameter it applies to
# (probably not useful for MFCs)
# offsetParameter = flow.mLperMin
# offsetDefault = 0.

# valid range: values outside of this range will be considered errors
# validRange = [0., 5000.]

# sequent microsystems output channel number (can be 1 - 4), writes 0-5 Vdc
# outputChannel = 1

# the minimum and maximum flow rates in mL/min for setting output voltages
# on this MFC (should be the same as the hardwareRange)
# flowRateRange = [0., 5000.]


[mfc.co2]

# sequent microsystems stack level (usually 0, can be up to 7)
# stackLevel = 0

# sequent microsystems input channel number (can be 1 - 4), reads 4-20 mA
# inputChannel = 3
# channelType = volts

# how to convert volts or milliAmps to the sensor value -- what to call it,
# what 0 V (or 4 mA) should map to, and what 10 V (or 20 mA) should map to
# parameterName = flow.mLperMin
# hardwareRange = [0.0, 40.0]

# which parameter to display in GUI, and with how many decimal places
# displayParameter = flow.mLperMin
# displayDecimals = 1

# sampling: frequency (seconds)
# how often the MFC is asked for its current setting;
# not all values may be saved in memory/files
# sampleFrequency = 5

# logging: frequency (seconds)
# controls how often metrics from the MFC are saved in memory and written to log files
# loggingFrequency = 300

# default corrective offset (mL/min), and the parameter it applies to
# (probably not useful for MFCs)
# offsetParameter = flow.mLperMin
# offsetDefault = 0.0

# valid range: values outside of this range will be considered errors
# validRange = [0.0, 20.0]

# sequent microsystems output channel number (can be 1 - 4), writes 0-5 Vdc
# outputChannel = 2

# the minimum and maximum flow rates in mL/min for setting output voltages
# on this MFC (should be the same as the hardwareRange)
# flowRateRange = [0.0, 20.0]


[mfc.n2]

# sequent microsystems stack level (usually 0, can be up to 7)
# stackLevel = 0

# sequent microsystems input channel number (can be 1 - 4), reads 4-20 mA
# inputChannel = 4
# channelType = volts

# how to convert volts or milliAmps to the sensor value -- what to call it,
# what 0 V (or 4 mA) should map to, and what 10 V (or 20 mA) should map to
# parameterName = flow.mLperMin
# hardwareRange = [0., 10000.]

# which parameter to display in GUI, and with how many decimal places
# displayParameter = flow.mLperMin
# displayDecimals = 0

# sampling: frequency (seconds)
# how often the MFC is asked for its current setting;
# not all values may be saved in memory/files
# sampleFrequency = 5

# logging: frequency (seconds)
# controls how often metrics from the MFC are saved in memory and written to log files
# loggingFrequency = 300

# default corrective offset (mL/min), and the parameter it applies to
# (probably not useful for MFCs)
# offsetParameter = flow.mLperMin
# offsetDefault = 0.

# valid range: values outside of this range will be considered errors
# validRange = [0., 5000.]

# sequent microsystems output channel number (can be 1 - 4), writes 0-5 Vdc
# outputChannel = 3

# the minimum and maximum flow rates in mL/min for setting output voltages
# on this MFC (should be the same as the hardwareRange)
# flowRateRange = [0., 5000.]

